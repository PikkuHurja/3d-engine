#version 430
layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, r8) uniform writeonly image2D outputImage;


uniform uint seed     = 0;
uniform uint point_count = 256;

uint hash(uint x) {
    x ^= x >> 16;
    x *= 0x7feb352dU;
    x ^= x >> 15;
    x *= 0x846ca68bU;
    x ^= x >> 16;
    return x;
}
float fhash(uint i){
    return float(hash(i) & 0xFFFFFF) / float(0xFFFFFF);
}



shared vec2 points[256];

float closest_distance(vec2 uv){
    vec2 closest = points[0];
    float dist = dot(uv, closest);
    for(uint i = 1; i < 255; i++){
        if(i >= point_count) 
            return sqrt(dist);

        vec2 delta = uv-points[i];
        float cdist = dot(delta,delta);
        if(cdist < dist){
            dist = cdist;
            closest = points[i];
        }
    }
    return sqrt(dist);
}

void main(){
    points[gl_LocalInvocationIndex] = vec2(fhash(seed + gl_LocalInvocationIndex),fhash(seed + gl_LocalInvocationIndex + gl_WorkGroupSize.x*gl_WorkGroupSize.y));
    memoryBarrierShared();
    barrier();

    uvec2 size = imageSize(outputImage);
    if(gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y)
        return;


    vec2 uv = vec2(gl_GlobalInvocationID.xy)/vec2(size) + vec2(.5)/vec2(size); /*half, so that the sample is taken from the middle*/

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(closest_distance(uv)), 1.0));
}