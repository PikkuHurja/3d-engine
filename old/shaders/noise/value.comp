#version 430 core

// tbh this is the same as white noise, since im too lazy to lerp that shit for you....
// this just is tileable to an extent, so its better in that account... tho you may have some problems with the tiling and such, 
// since you need the four other textures (up, down, left, right) for this noise isn't 'standalone'
// also, it may be faster to not precalculate this shit but who knows, maby not?

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, r8) uniform writeonly image2D outputImage;

uniform uint  seed;
uniform ivec2 chunk_position = ivec2(0,0);

uint hash(uvec2 x, uint seed){
    const uint m = 0x5bd1e995U;
    uint hash = seed;
    // process first vector element
    uint k = x.x; 
    k *= m;
    k ^= k >> 24;
    k *= m;
    hash *= m;
    hash ^= k;
    // process second vector element
    k = x.y; 
    k *= m;
    k ^= k >> 24;
    k *= m;
    hash *= m;
    hash ^= k;
	// some final mixing
    hash ^= hash >> 13;
    hash *= m;
    hash ^= hash >> 15;
    return hash;
}

void main(){
    uvec2 image_size = imageSize(outputImage);
    if(gl_GlobalInvocationID.x >= image_size.x || gl_GlobalInvocationID.y >= image_size.y)
        return;
    
    uvec2 total_position = chunk_position*image_size + gl_GlobalInvocationID.xy;
    uint value_integer = hash(total_position, seed);
    float value_float = float(value_integer) * (1.0 / 4294967295.0);
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(value_float), 1.f));
}