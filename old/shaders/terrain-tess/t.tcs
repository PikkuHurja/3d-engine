#version 460 core

layout(vertices = 4) out;

layout(std140, binding = 0) uniform ubCamera {
    vec3 camera_position;
    vec3 camera_forward;
    vec3 camera_up;
    vec3 camera_right;
    mat4 view;
    mat4 inverse_view;
    mat4 perspective;
    mat4 inverse_perspective;
    mat4 perspective_view;
    mat4 inverse_perspective_view;
};

void main() {
    // Pass through vertex positions
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    // Only one invocation sets the tess levels
    if (gl_InvocationID == 0) {
        // Estimate patch center position
        vec3 p0 = gl_in[0].gl_Position.xyz;
        vec3 p1 = gl_in[1].gl_Position.xyz;
        vec3 p2 = gl_in[2].gl_Position.xyz;
        vec3 p3 = gl_in[3].gl_Position.xyz;
        vec3 center = (p0 + p1 + p2 + p3) * 0.25;

        float dist      = distance(camera_position, center);
        float tessLevel = clamp(100.0 / dist, 1.0, 10.0); // tweak as needed

        gl_TessLevelOuter[0] = tessLevel;
        gl_TessLevelOuter[1] = tessLevel;
        gl_TessLevelOuter[2] = tessLevel;
        gl_TessLevelOuter[3] = tessLevel;
        gl_TessLevelInner[0] = tessLevel;
        gl_TessLevelInner[1] = tessLevel;
    }
}
